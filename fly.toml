# fly.toml
# Configuração para uma aplicação Payload CMS + Next.js no Fly.io
# Documentação de referência: https://fly.io/docs/reference/configuration/

# Nome da sua aplicação no Fly.io. Deve ser único.
app = "smilux-aligner-app"

# Região primária onde sua aplicação será implantada.
# Escolha a mais próxima dos seus usuários. Ex: 'gru' (São Paulo), 'mia' (Miami).
primary_region = "gru"

# Desabilita o console interativo, que não é necessário para aplicações web.
console_command = "/bin/bash"

# [build]
# Configurações de build. O Fly.io usa buildpacks ou um Dockerfile.
# Como o Payload/Next.js geralmente vem com um Dockerfile, ele será usado automaticamente.
# As variáveis de build são passadas para o Dockerfile.
[build]
  [build.args]
    # Passa a URL pública do seu app para o processo de build do Next.js.
    # Isso é útil para gerar o sitemap, etc.
    # O Fly.io substitui 'smilux-aligner-app.fly.dev' pelo seu domínio.
    NEXT_PUBLIC_SERVER_URL = "https://smilux-aligner-app.fly.dev"

# [http_service]
# Define como o Fly.io deve lidar com o tráfego HTTP/HTTPS.
[[http_service]]
  # Processos internos da máquina virtual que devem receber o tráfego.
  internal_port = 3000
  force_https = true
  auto_stop_machines = true # Para a máquina para economizar custos quando não há tráfego.
  auto_start_machines = true # Inicia a máquina na primeira requisição.
  min_machines_running = 0 # No plano gratuito, 0 é ideal para economizar. Mude para 1 se precisar que esteja sempre online.
  processes = ["app"] # Mapeia para o processo 'app' definido na seção [processes] abaixo.

  # Health checks são CRUCIAIS. O Fly.io os usa para saber se sua app está saudável.
  # Se os checks falharem, o Fly.io reiniciará a máquina ou não enviará tráfego para ela.
  [[http_service.checks]]
    interval = "15s"      # Verifica a cada 15 segundos.
    timeout = "10s"       # Falha se não responder em 10 segundos.
    grace_period = "30s"  # Tempo de espera após o início da máquina antes do primeiro check.
    method = "GET"
    path = "/api/health"  # Endpoint de saúde do Payload. Ele responde 200 OK se o DB estiver conectado.
    protocol = "http"